// Generated by CIRCT firtool-1.44.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// VCS coverage exclude_file
module regs_combMem(	// @[cpu/src/unit/GPR.scala:19:19]
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data,
  output [31:0] R0_data,
                R1_data
);

  reg [31:0] Memory[0:31];	// @[cpu/src/unit/GPR.scala:19:19]
  always @(posedge W0_clk) begin	// @[cpu/src/unit/GPR.scala:19:19]
    if (W0_en)	// @[cpu/src/unit/GPR.scala:19:19]
      Memory[W0_addr] <= W0_data;	// @[cpu/src/unit/GPR.scala:19:19]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// @[cpu/src/unit/GPR.scala:19:19]
    reg [31:0] _RANDOM_MEM;	// @[cpu/src/unit/GPR.scala:19:19]
    initial begin	// @[cpu/src/unit/GPR.scala:19:19]
      `INIT_RANDOM_PROLOG_	// @[cpu/src/unit/GPR.scala:19:19]
      `ifdef RANDOMIZE_MEM_INIT	// @[cpu/src/unit/GPR.scala:19:19]
        for (logic [5:0] i = 6'h0; i < 6'h20; i += 6'h1) begin
          _RANDOM_MEM = `RANDOM;	// @[cpu/src/unit/GPR.scala:19:19]
          Memory[i[4:0]] = _RANDOM_MEM;	// @[cpu/src/unit/GPR.scala:19:19]
        end	// @[cpu/src/unit/GPR.scala:19:19]
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// @[cpu/src/unit/GPR.scala:19:19]
  assign R1_data = R1_en ? Memory[R1_addr] : 32'bx;	// @[cpu/src/unit/GPR.scala:19:19]
endmodule

module IFU(	// @[<stdin>:3:10]
  input         clock,	// @[<stdin>:4:11]
                reset,	// @[<stdin>:5:11]
  output [31:0] io_pc	// @[cpu/src/stage/IFU.scala:10:16]
);

  reg [31:0] pc_reg;	// @[cpu/src/stage/IFU.scala:13:25]
  always @(posedge clock) begin	// @[<stdin>:4:11]
    if (reset)	// @[<stdin>:4:11]
      pc_reg <= 32'h80000000;	// @[cpu/src/stage/IFU.scala:13:25]
    else	// @[<stdin>:4:11]
      pc_reg <= pc_reg + 32'h4;	// @[cpu/src/stage/IFU.scala:13:25, :14:25]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[<stdin>:3:10]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[<stdin>:3:10]
      `FIRRTL_BEFORE_INITIAL	// @[<stdin>:3:10]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];	// @[<stdin>:3:10]
    initial begin	// @[<stdin>:3:10]
      `ifdef INIT_RANDOM_PROLOG_	// @[<stdin>:3:10]
        `INIT_RANDOM_PROLOG_	// @[<stdin>:3:10]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[<stdin>:3:10]
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// @[<stdin>:3:10]
        pc_reg = _RANDOM[/*Zero width*/ 1'b0];	// @[<stdin>:3:10, cpu/src/stage/IFU.scala:13:25]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[<stdin>:3:10]
      `FIRRTL_AFTER_INITIAL	// @[<stdin>:3:10]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_pc = pc_reg;	// @[<stdin>:3:10, cpu/src/stage/IFU.scala:13:25]
endmodule

module IDU(	// @[<stdin>:15:10]
  input  [31:0] io_inst,	// @[cpu/src/stage/IDU.scala:10:16]
                io_rs1_data,	// @[cpu/src/stage/IDU.scala:10:16]
  output [4:0]  io_rs1_addr,	// @[cpu/src/stage/IDU.scala:10:16]
                io_rs2_addr,	// @[cpu/src/stage/IDU.scala:10:16]
                io_rd_addr,	// @[cpu/src/stage/IDU.scala:10:16]
  output [31:0] io_op1_data,	// @[cpu/src/stage/IDU.scala:10:16]
                io_op2_data	// @[cpu/src/stage/IDU.scala:10:16]
);

  assign io_rs1_addr = io_inst[19:15];	// @[<stdin>:15:10, cpu/src/stage/IDU.scala:22:27]
  assign io_rs2_addr = io_inst[24:20];	// @[<stdin>:15:10, cpu/src/stage/IDU.scala:23:27]
  assign io_rd_addr = io_inst[11:7];	// @[<stdin>:15:10, cpu/src/stage/IDU.scala:24:27]
  assign io_op1_data = io_rs1_data;	// @[<stdin>:15:10]
  assign io_op2_data = {{20{io_inst[31]}}, io_inst[31:20]};	// @[<stdin>:15:10, cpu/src/stage/IDU.scala:26:30, :27:{26,31,41}]
endmodule

module EXU(	// @[<stdin>:45:10]
  input  [31:0] io_data1,	// @[cpu/src/stage/EXU.scala:10:16]
                io_data2,	// @[cpu/src/stage/EXU.scala:10:16]
  output [31:0] io_alu_res	// @[cpu/src/stage/EXU.scala:10:16]
);

  assign io_alu_res = io_data1 + io_data2;	// @[<stdin>:45:10, cpu/src/stage/EXU.scala:16:28]
endmodule

module GPR(	// @[<stdin>:54:10]
  input         clock,	// @[<stdin>:55:11]
                io_wen,	// @[cpu/src/unit/GPR.scala:10:16]
  input  [4:0]  io_raddr1,	// @[cpu/src/unit/GPR.scala:10:16]
                io_raddr2,	// @[cpu/src/unit/GPR.scala:10:16]
                io_waddr,	// @[cpu/src/unit/GPR.scala:10:16]
  input  [31:0] io_wdata,	// @[cpu/src/unit/GPR.scala:10:16]
  output [31:0] io_rdata1	// @[cpu/src/unit/GPR.scala:10:16]
);

  wire [31:0] _regs_ext_R0_data;	// @[cpu/src/unit/GPR.scala:19:19]
  regs_combMem regs_ext (	// @[cpu/src/unit/GPR.scala:19:19]
    .R0_addr (io_raddr1),
    .R0_en   (1'h1),	// @[<stdin>:54:10]
    .R0_clk  (clock),
    .R1_addr (io_raddr2),
    .R1_en   (1'h1),	// @[<stdin>:54:10]
    .R1_clk  (clock),
    .W0_addr (io_waddr),
    .W0_en   (io_wen & (|io_waddr)),	// @[cpu/src/unit/GPR.scala:22:{18,30}]
    .W0_clk  (clock),
    .W0_data (io_wdata),
    .R0_data (_regs_ext_R0_data),
    .R1_data (/* unused */)
  );
  assign io_rdata1 = io_raddr1 == 5'h0 ? 32'h0 : _regs_ext_R0_data;	// @[<stdin>:54:10, cpu/src/unit/GPR.scala:19:19, :20:{21,33}, :21:21]
endmodule

module TOP(	// @[<stdin>:75:10]
  input         clock,	// @[<stdin>:76:11]
                reset,	// @[<stdin>:77:11]
                io_wen,	// @[cpu/src/TOP.scala:12:16]
  input  [31:0] io_inst,	// @[cpu/src/TOP.scala:12:16]
  output [31:0] io_pc,	// @[cpu/src/TOP.scala:12:16]
  output [4:0]  io_rs1,	// @[cpu/src/TOP.scala:12:16]
                io_rs2,	// @[cpu/src/TOP.scala:12:16]
  output [31:0] io_res	// @[cpu/src/TOP.scala:12:16]
);

  wire [31:0] _GPR_io_rdata1;	// @[cpu/src/TOP.scala:32:21]
  wire [31:0] _EXU_io_alu_res;	// @[cpu/src/TOP.scala:31:21]
  wire [4:0]  _IDU_io_rs1_addr;	// @[cpu/src/TOP.scala:30:21]
  wire [4:0]  _IDU_io_rs2_addr;	// @[cpu/src/TOP.scala:30:21]
  wire [4:0]  _IDU_io_rd_addr;	// @[cpu/src/TOP.scala:30:21]
  wire [31:0] _IDU_io_op1_data;	// @[cpu/src/TOP.scala:30:21]
  wire [31:0] _IDU_io_op2_data;	// @[cpu/src/TOP.scala:30:21]
  IFU IFU (	// @[cpu/src/TOP.scala:29:21]
    .clock (clock),
    .reset (reset),
    .io_pc (io_pc)
  );
  IDU IDU (	// @[cpu/src/TOP.scala:30:21]
    .io_inst     (io_inst),
    .io_rs1_data (_GPR_io_rdata1),	// @[cpu/src/TOP.scala:32:21]
    .io_rs1_addr (_IDU_io_rs1_addr),
    .io_rs2_addr (_IDU_io_rs2_addr),
    .io_rd_addr  (_IDU_io_rd_addr),
    .io_op1_data (_IDU_io_op1_data),
    .io_op2_data (_IDU_io_op2_data)
  );
  EXU EXU (	// @[cpu/src/TOP.scala:31:21]
    .io_data1   (_IDU_io_op1_data),	// @[cpu/src/TOP.scala:30:21]
    .io_data2   (_IDU_io_op2_data),	// @[cpu/src/TOP.scala:30:21]
    .io_alu_res (_EXU_io_alu_res)
  );
  GPR GPR (	// @[cpu/src/TOP.scala:32:21]
    .clock     (clock),
    .io_wen    (io_wen),
    .io_raddr1 (_IDU_io_rs1_addr),	// @[cpu/src/TOP.scala:30:21]
    .io_raddr2 (_IDU_io_rs2_addr),	// @[cpu/src/TOP.scala:30:21]
    .io_waddr  (_IDU_io_rd_addr),	// @[cpu/src/TOP.scala:30:21]
    .io_wdata  (_EXU_io_alu_res),	// @[cpu/src/TOP.scala:31:21]
    .io_rdata1 (_GPR_io_rdata1)
  );
  assign io_rs1 = _IDU_io_rs1_addr;	// @[<stdin>:75:10, cpu/src/TOP.scala:30:21]
  assign io_rs2 = _IDU_io_rs2_addr;	// @[<stdin>:75:10, cpu/src/TOP.scala:30:21]
  assign io_res = _EXU_io_alu_res;	// @[<stdin>:75:10, cpu/src/TOP.scala:31:21]
endmodule

